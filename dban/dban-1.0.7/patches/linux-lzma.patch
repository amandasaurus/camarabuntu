diff -Ndru linux-2.4.33/arch/i386/boot/compressed/Makefile linux-2.4.33-dban/arch/i386/boot/compressed/Makefile
--- linux-2.4.33/arch/i386/boot/compressed/Makefile	2002-02-25 14:37:52.000000000 -0500
+++ linux-2.4.33-dban/arch/i386/boot/compressed/Makefile	2006-08-11 16:37:25.000000000 -0400
@@ -7,7 +7,15 @@
 HEAD = head.o
 SYSTEM = $(TOPDIR)/vmlinux
 
-OBJECTS = $(HEAD) misc.o
+ifeq ($(CONFIG_KERNEL_GZIP),y)
+	COMPRESSOR = gzip -9cf
+	OBJECTS = $(HEAD) misc.o
+endif
+
+ifeq ($(CONFIG_KERNEL_LZMA),y)
+	COMPRESSOR = lzma e -so
+	OBJECTS = $(HEAD) misc_lzma.o
+endif
 
 ZLDFLAGS = -e startup_32
 
@@ -37,14 +45,17 @@
 misc.o: misc.c
 	$(CC) $(CFLAGS) -DKBUILD_BASENAME=$(subst $(comma),_,$(subst -,_,$(*F))) -c misc.c
 
+misc_lzma.o: misc_lzma.c
+	$(CC) $(CFLAGS) -DKBUILD_BASENAME=$(subst $(comma),_,$(subst -,_,$(*F))) -c misc_lzma.c
+
 piggy.o:	$(SYSTEM)
 	tmppiggy=_tmp_$$$$piggy; \
-	rm -f $$tmppiggy $$tmppiggy.gz $$tmppiggy.lnk; \
+	rm -f $$tmppiggy $$tmppiggy.out $$tmppiggy.lnk; \
 	$(OBJCOPY) $(SYSTEM) $$tmppiggy; \
-	gzip -f -9 < $$tmppiggy > $$tmppiggy.gz; \
+	$(COMPRESSOR) $$tmppiggy > $$tmppiggy.out; \
 	echo "SECTIONS { .data : { input_len = .; LONG(input_data_end - input_data) input_data = .; *(.data) input_data_end = .; }}" > $$tmppiggy.lnk; \
-	$(LD) -r -o piggy.o -b binary $$tmppiggy.gz -b elf32-i386 -T $$tmppiggy.lnk; \
-	rm -f $$tmppiggy $$tmppiggy.gz $$tmppiggy.lnk
+	$(LD) -r -o piggy.o -b binary $$tmppiggy.out -b elf32-i386 -T $$tmppiggy.lnk; \
+	rm -f $$tmppiggy $$tmppiggy.out $$tmppiggy.lnk
 
 clean:
 	rm -f vmlinux bvmlinux _tmp_*
diff -Ndru linux-2.4.33/arch/i386/boot/compressed/misc_lzma.c linux-2.4.33-dban/arch/i386/boot/compressed/misc_lzma.c
--- linux-2.4.33/arch/i386/boot/compressed/misc_lzma.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.33-dban/arch/i386/boot/compressed/misc_lzma.c	2006-08-11 16:37:25.000000000 -0400
@@ -0,0 +1,411 @@
+/*
+ * misc_lzma.c: LZMA kernel image decompression routine.
+ *
+ */
+
+#include <linux/linkage.h>
+#include <linux/vmalloc.h>
+#include <linux/tty.h>
+#include <asm/io.h>
+
+typedef unsigned char  uch;
+typedef unsigned short ush;
+typedef unsigned long  ulg;
+
+/* We use a local memcpy function. */
+#undef memcpy
+
+#define HEAP_SIZE             0x8000
+#define INPLACE_MOVE_ROUTINE  0x1000
+#define LOW_BUFFER_MAX       0x90000
+#define LOW_BUFFER_START      0x2000
+#define STACK_SIZE            (4096)
+
+#ifndef STANDARD_MEMORY_BIOS_CALL
+#define ALT_MEM_K   (*(unsigned long *)(real_mode + 0x1e0))
+#endif
+
+#define EXT_MEM_K   (*(unsigned short *)(real_mode + 0x2))
+#define SCREEN_INFO (*(struct screen_info *)(real_mode+0))
+
+/* These externals are passed in by the head.S assembly. */
+extern char input_data[];
+extern int  input_len;
+extern int  end;
+
+/* Local prototypes. */
+static void  error( char* m );
+static void* malloc( int size );
+static void* memcpy( void*, __const void*, size_t );
+static void  putstr( const char* );
+static void  scroll( void );
+static void  vidinit( void );
+
+/* Video and memory management variables. */
+static long  free_mem_ptr = (long)&end;
+static long  free_mem_end_ptr;
+static uch*  real_mode;
+static int   vidlines;
+static int   vidcols;
+static int   vidport;
+static char* vidmem = (char*)0xb8000;
+
+long user_stack[STACK_SIZE];
+
+struct
+{
+	long* a;
+	short b;
+} stack_start = { &user_stack[STACK_SIZE], __KERNEL_DS };
+
+struct moveparams
+{
+	uch *low_buffer_start;
+	int lcount;
+	uch *high_buffer_start;
+	int hcount;
+};
+
+
+#define _LZMA_PROB32
+#define _LZMA_UINT32_IS_ULONG
+#include "../../../../lib/LzmaDecode.h"
+#include "../../../../lib/LzmaDecodeSize.c"
+
+#ifdef _LZMA_OUT_READ
+#error "_LZMA_OUT_READ is incompatible with the kernel loader."
+#endif
+
+#ifdef _LZMA_IN_CB
+#error "_LZMA_IN_CB is incompatible with the kernel loader."
+#endif
+
+
+/*
+static char* bork( UInt32 in )
+{
+	static char out[11];
+	int ii = 10;
+
+	out[ii--] = '\0';
+
+	do
+	{
+		out[ii--] = '0' + in % 10;
+   } while( in /= 10 );
+
+	return &out[ii+1];
+}
+*/
+
+static void error(char* x)
+{
+	putstr( "LZMA: " );
+	putstr( x );
+	putstr( "System halted." );
+	while( 1 );
+}
+
+static void* malloc( int size )
+{
+	void *p;
+
+	if( size < 0 )
+	{
+		error( "Malloc was called with a negative size.\n" );
+	}
+
+	if( free_mem_ptr <= 0 )
+	{
+		error( "Malloc has a non-positive free memory pointer.\n" );
+	}
+
+	free_mem_ptr = ( free_mem_ptr +3 ) & ~3;
+	p = (void *)free_mem_ptr;
+	free_mem_ptr += size;
+
+	if( free_mem_ptr >= free_mem_end_ptr )
+	{
+		error( "Out of memory. The heap size is too small to load this kernel.\n" );
+	}
+
+	return p;
+}
+
+static void* memcpy(void* __dest, __const void* __src, size_t __n)
+{
+	int i;
+	char* d = (char*)__dest, *s = (char*)__src;
+	for( i = 0; i < __n; i++ ) { d[i] = s[i]; }
+	return __dest;
+}
+
+static void putstr(const char *s)
+{
+	int x = SCREEN_INFO.orig_x;
+	int y = SCREEN_INFO.orig_y;
+	int pos;
+	char c;
+
+	while( ( c = *s++ ) != '\0' )
+	{
+		if( c == '\n' )
+		{
+			x = 0;
+			if( ++y >= vidlines )
+			{
+				scroll();
+				y--;
+			}
+		}
+		else
+		{
+			vidmem[ ( x + vidcols * y ) * 2 ] = c; 
+			if( ++x >= vidcols )
+			{
+				x = 0;
+				if ( ++y >= vidlines )
+				{
+					scroll();
+					y--;
+				}
+			}
+		}
+	}
+
+	SCREEN_INFO.orig_x = x;
+	SCREEN_INFO.orig_y = y;
+
+	pos = (x + vidcols * y) * 2;	/* Update cursor position */
+	outb_p( 14, vidport );
+	outb_p( 0xff & (pos >> 9), vidport +1 );
+	outb_p( 15, vidport );
+	outb_p( 0xff & (pos >> 1), vidport +1 );
+}
+
+static void scroll( void )
+{
+	/*
+	int ii = ( vidlines - 1 ) * vidcols * 2;
+	memcpy( vidmem, vidmem + vidcols * 2, ( vidlines - 1 ) * vidcols * 2 );
+	while( ii < vidlines * vidcols * 2 ) 
+	{
+		vidmem[ii] = ' ';
+		ii += 2;
+	}
+	*/
+
+	int ii;
+
+	memcpy( vidmem, vidmem + vidcols * 2, ( vidlines - 1 ) * vidcols * 2 );
+	for ( ii = ( vidlines - 1 ) * vidcols * 2; ii < vidlines * vidcols * 2; ii += 2 )
+		vidmem[ii] = ' ';
+}
+
+static void vidinit( void )
+{
+	if( SCREEN_INFO.orig_video_mode == 7 )
+	{
+		vidmem  = (char *) 0xb0000;
+		vidport = 0x3b4;
+	}
+	else
+	{
+		vidmem  = (char *) 0xb8000;
+		vidport = 0x3d4;
+	}
+
+	vidlines = SCREEN_INFO.orig_video_lines;
+	vidcols  = SCREEN_INFO.orig_video_cols;
+}
+
+static int lzma( uch* lzma_input, SizeT lzma_input_length, uch* lzma_output )
+{
+	SizeT  lzma_input_processed    = 0;
+	UInt32 lzma_output_length      = 0;
+	UInt32 lzma_output_length_high = 0;
+	SizeT  lzma_output_processed   = 0;
+
+	CLzmaDecoderState lzma_state;
+
+
+	/* Read the LZMA header. */
+	if( LzmaDecodeProperties( &lzma_state.Properties,
+									   lzma_input,
+									   LZMA_PROPERTIES_SIZE
+	                        ) != LZMA_RESULT_OK
+	  )
+	{
+		error( "Bad stream properties.\n" );
+	}
+
+	/* Advance past the stream header. */
+	lzma_input        += LZMA_PROPERTIES_SIZE;
+	lzma_input_length -= LZMA_PROPERTIES_SIZE;
+
+	{
+		int ii;
+
+		/* Read the stream length, which is a packed u64 integer. */
+		for( ii = 0; ii < 4; ++ii )
+		{
+			lzma_output_length |= (UInt32)( *lzma_input++ ) << ( ii << 3 );
+		}
+	
+		for( ii = 0; ii < 4; ++ii )
+		{
+			lzma_output_length_high |= (UInt32)( *lzma_input++ ) << ( ii << 3 );
+		}
+	
+		/* Advance past the stream length. */
+		lzma_input_length -= 8;
+	}
+
+	if( lzma_output_length == 0xFFFFFFFF && lzma_output_length_high == 0xFFFFFFFF )
+	{
+		/* A kernel that was compressed from a pipe will have */
+		/* an EOS and cannot be decompressed by this routine. */
+		error( "The stream has an EOS marker.\n" );
+	}
+
+	if( lzma_output_length_high != 0 )
+	{
+		error( "The stream header says that the kernel is larger than 2 gigabytes.\n" );
+	}
+
+	/* The heap size was increased because this is usually 32 kilobytes. */
+	lzma_state.Probs = (CProb*)malloc( LzmaGetNumProbs( &lzma_state.Properties ) * sizeof(CProb) );
+
+	/* LzmaDecode can be called only once per context if _LZMA_OUT_READ is
+	 * undefined, but we do not use _LZMA_OUT_READ because the dictionary could
+	 * require an 8 megabyte malloc.  Instead, we unpack the entire kernel to
+	 * the high buffer with one call to LzmaDecode and relocate part to the low
+	 * buffer afterwards.  This bounds decompression overhead to the size of the
+	 * low buffer and simplifies the routine. */
+
+	if( LzmaDecode( &lzma_state,
+	                 lzma_input,
+	                 lzma_input_length,
+	                &lzma_input_processed,
+	                 lzma_output,
+	                 lzma_output_length,
+	                &lzma_output_processed
+	              ) != LZMA_RESULT_OK
+	  )
+	{
+		error( "Decoding failed." );
+	}
+
+	if( lzma_input_length != lzma_input_processed )
+	{
+		error( "The input stream was incompletely processed.\n" );
+	}
+
+	if( lzma_output_length != lzma_output_processed )
+	{
+		error( "The output stream was incompletely processed.\n" );
+	}
+
+	return (int)lzma_output_processed;
+}
+
+asmlinkage int decompress_kernel( struct moveparams* mv, void* rmode )
+{
+	unsigned int output_len = 0;
+	int high_loaded = 0;
+
+	unsigned int low_buffer_end;
+	unsigned int low_buffer_size;
+	uch* high_buffer_start;
+
+	real_mode = rmode;
+	vidinit();
+
+	putstr("Uncompressing Linux with LZMA...\n");
+
+
+	if( free_mem_ptr < 0x100000 )
+	{
+		/* setup_normal_output_buffer */
+
+		#ifdef STANDARD_MEMORY_BIOS_CALL
+		if( EXT_MEM_K < 1024 )
+		{
+			error("More than 2MB of memory is required.\n");
+		}
+		#else
+		if( (ALT_MEM_K > EXT_MEM_K ? ALT_MEM_K : EXT_MEM_K) < 1024)
+		{
+			error("More than 2MB of memory is required.\n");
+		}
+		#endif /* STANDARD_MEMORY_BIOS_CALL */
+
+		free_mem_end_ptr = (long)real_mode;
+
+		/* Unpack the the kernel directly to the 1M mark. */
+		output_len = lzma( input_data, input_len, (char*)0x100000 );
+	}
+	else
+	{
+		/* setup_output_buffer_if_we_run_high */
+
+		high_buffer_start = (uch *)(((ulg)&end) + HEAP_SIZE);
+
+		#ifdef STANDARD_MEMORY_BIOS_CALL
+		if( EXT_MEM_K < (3*1024) )
+		{
+			error("This computer has less than 4MB of available memory.\n");
+		}
+		#else
+		if( (ALT_MEM_K > EXT_MEM_K ? ALT_MEM_K : EXT_MEM_K) < (3*1024) )
+		{
+			error("This computer has less than 4MB of availalbe memory.\n");
+		}
+		#endif /* STANDARD_MEMORY_BIOS_CALL */
+
+		mv->low_buffer_start = (char *)LOW_BUFFER_START;
+		low_buffer_end = ((unsigned int)real_mode > LOW_BUFFER_MAX ? LOW_BUFFER_MAX : (unsigned int)real_mode) & ~0xfff;
+		low_buffer_size = low_buffer_end - LOW_BUFFER_START;
+		high_loaded = 1;
+		free_mem_end_ptr = (long)high_buffer_start;
+		if( (0x100000 + low_buffer_size) > ((ulg)high_buffer_start) )
+		{
+			high_buffer_start = (uch *)(0x100000 + low_buffer_size);
+			mv->hcount = 0; /* say: we need not to move high_buffer */
+		}
+		else
+		{
+			mv->hcount = -1;
+		}
+		mv->high_buffer_start = high_buffer_start;
+
+		output_len = lzma( input_data, input_len, high_buffer_start );
+
+		/* Relocate the kernel to the low buffer. */
+		memcpy( (void*)LOW_BUFFER_START, high_buffer_start, low_buffer_size );
+		memcpy( high_buffer_start, high_buffer_start + low_buffer_size, output_len - low_buffer_size );
+	}
+
+	putstr("Ok, booting the kernel. Please wait 60 seconds for DBAN to start...\n");
+	putstr("If the computer hangs here, then reset it and read the DBAN\n");
+	putstr("troubleshooting hints by pushing F4 at the boot prompt.\n");
+
+	if( high_loaded )
+	{
+		/* close_output_buffer_if_we_run_high */
+
+		if( output_len > low_buffer_size )
+		{
+			mv->lcount = low_buffer_size;
+			if( mv->hcount )
+			{
+				mv->hcount = output_len - low_buffer_size;
+			}
+		}
+		else
+		{
+			mv->lcount = output_len;
+			mv->hcount = 0;
+		}
+	}
+
diff -Ndru linux-2.4.33/arch/i386/config.in linux-2.4.33-dban/arch/i386/config.in
--- linux-2.4.33/arch/i386/config.in	2006-08-11 00:18:20.000000000 -0400
+++ linux-2.4.33-dban/arch/i386/config.in	2006-08-11 16:37:25.000000000 -0400
@@ -347,6 +347,16 @@
 
 source drivers/acpi/Config.in
 
+if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
+   choice 'Kernel compression format' \
+          "gzip	CONFIG_KERNEL_GZIP  \
+			  lzma	CONFIG_KERNEL_LZMA" \
+			  gzip
+else
+   define_bool CONFIG_KERNEL_GZIP y
+   define_bool CONFIG_KERNEL_LZMA n
+fi
+
 endmenu
 
 source drivers/mtd/Config.in
diff -Ndru linux-2.4.33/lib/LzmaDecode.h linux-2.4.33-dban/lib/LzmaDecode.h
--- linux-2.4.33/lib/LzmaDecode.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.33-dban/lib/LzmaDecode.h	2006-08-11 16:37:25.000000000 -0400
@@ -0,0 +1,131 @@
+/* 
+  LzmaDecode.h
+  LZMA Decoder interface
+
+  LZMA SDK 4.21 Copyright (c) 1999-2005 Igor Pavlov (2005-06-08)
+  http://www.7-zip.org/
+
+  LZMA SDK is licensed under two licenses:
+  1) GNU Lesser General Public License (GNU LGPL)
+  2) Common Public License (CPL)
+  It means that you can select one of these two licenses and 
+  follow rules of that license.
+
+  SPECIAL EXCEPTION:
+  Igor Pavlov, as the author of this code, expressly permits you to 
+  statically or dynamically link your code (or bind by name) to the 
+  interfaces of this file without subjecting your linked code to the 
+  terms of the CPL or GNU LGPL. Any modifications or additions 
+  to this file, however, are subject to the LGPL or CPL terms.
+*/
+
+#ifndef __LZMADECODE_H
+#define __LZMADECODE_H
+
+/* #define _LZMA_IN_CB */
+/* Use callback for input data */
+
+/* #define _LZMA_OUT_READ */
+/* Use read function for output data */
+
+/* #define _LZMA_PROB32 */
+/* It can increase speed on some 32-bit CPUs, 
+   but memory usage will be doubled in that case */
+
+/* #define _LZMA_LOC_OPT */
+/* Enable local speed optimizations inside code */
+
+/* #define _LZMA_SYSTEM_SIZE_T */
+/* Use system's size_t. You can use it to enable 64-bit sizes supporting*/
+
+#ifndef UInt32
+#ifdef _LZMA_UINT32_IS_ULONG
+#define UInt32 unsigned long
+#else
+#define UInt32 unsigned int
+#endif
+#endif
+
+#ifndef SizeT
+#ifdef _LZMA_SYSTEM_SIZE_T
+#include <stddef.h>
+#define SizeT size_t
+#else
+#define SizeT UInt32
+#endif
+#endif
+
+#ifdef _LZMA_PROB32
+#define CProb UInt32
+#else
+#define CProb unsigned short
+#endif
+
+#define LZMA_RESULT_OK 0
+#define LZMA_RESULT_DATA_ERROR 1
+
+#ifdef _LZMA_IN_CB
+typedef struct _ILzmaInCallback
+{
+  int (*Read)(void *object, const unsigned char **buffer, SizeT *bufferSize);
+} ILzmaInCallback;
+#endif
+
+#define LZMA_BASE_SIZE 1846
+#define LZMA_LIT_SIZE 768
+
+#define LZMA_PROPERTIES_SIZE 5
+
+typedef struct _CLzmaProperties
+{
+  int lc;
+  int lp;
+  int pb;
+  #ifdef _LZMA_OUT_READ
+  UInt32 DictionarySize;
+  #endif
+}CLzmaProperties;
+
+int LzmaDecodeProperties(CLzmaProperties *propsRes, const unsigned char *propsData, int size);
+
+#define LzmaGetNumProbs(Properties) (LZMA_BASE_SIZE + (LZMA_LIT_SIZE << ((Properties)->lc + (Properties)->lp)))
+
+#define kLzmaNeedInitId (-2)
+
+typedef struct _CLzmaDecoderState
+{
+  CLzmaProperties Properties;
+  CProb *Probs;
+
+  #ifdef _LZMA_IN_CB
+  const unsigned char *Buffer;
+  const unsigned char *BufferLim;
+  #endif
+
+  #ifdef _LZMA_OUT_READ
+  unsigned char *Dictionary;
+  UInt32 Range;
+  UInt32 Code;
+  UInt32 DictionaryPos;
+  UInt32 GlobalPos;
+  UInt32 DistanceLimit;
+  UInt32 Reps[4];
+  int State;
+  int RemainLen;
+  unsigned char TempDictionary[4];
+  #endif
+} CLzmaDecoderState;
+
+#ifdef _LZMA_OUT_READ
+#define LzmaDecoderInit(vs) { (vs)->RemainLen = kLzmaNeedInitId; }
+#endif
+
+int LzmaDecode(CLzmaDecoderState *vs,
+    #ifdef _LZMA_IN_CB
+    ILzmaInCallback *inCallback,
+    #else
+    const unsigned char *inStream, SizeT inSize, SizeT *inSizeProcessed,
+    #endif
+    unsigned char *outStream, SizeT outSize, SizeT *outSizeProcessed);
+
+#endif
diff -Ndru linux-2.4.33/lib/LzmaDecodeSize.c linux-2.4.33-dban/lib/LzmaDecodeSize.c
--- linux-2.4.33/lib/LzmaDecodeSize.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.33-dban/lib/LzmaDecodeSize.c	2006-08-11 16:37:25.000000000 -0400
@@ -0,0 +1,716 @@
+/*
+  LzmaDecodeSize.c
+  LZMA Decoder (optimized for Size version)
+  
+  LZMA SDK 4.27 Copyright (c) 1999-2005 Igor Pavlov (2005-08-07)
+  http://www.7-zip.org/
+
+  LZMA SDK is licensed under two licenses:
+  1) GNU Lesser General Public License (GNU LGPL)
+  2) Common Public License (CPL)
+  It means that you can select one of these two licenses and 
+  follow rules of that license.
+
+  SPECIAL EXCEPTION:
+  Igor Pavlov, as the author of this code, expressly permits you to 
+  statically or dynamically link your code (or bind by name) to the 
+  interfaces of this file without subjecting your linked code to the 
+  terms of the CPL or GNU LGPL. Any modifications or additions 
+  to this file, however, are subject to the LGPL or CPL terms.
+*/
+
+#include "LzmaDecode.h"
+
+#ifndef Byte
+#define Byte unsigned char
+#endif
+
+#define kNumTopBits 24
+#define kTopValue ((UInt32)1 << kNumTopBits)
+
+#define kNumBitModelTotalBits 11
+#define kBitModelTotal (1 << kNumBitModelTotalBits)
+#define kNumMoveBits 5
+
+typedef struct _CRangeDecoder
+{
+  const Byte *Buffer;
+  const Byte *BufferLim;
+  UInt32 Range;
+  UInt32 Code;
+  #ifdef _LZMA_IN_CB
+  ILzmaInCallback *InCallback;
+  int Result;
+  #endif
+  int ExtraBytes;
+} CRangeDecoder;
+
+Byte RangeDecoderReadByte(CRangeDecoder *rd)
+{
+  if (rd->Buffer == rd->BufferLim)
+  {
+    #ifdef _LZMA_IN_CB
+    SizeT size;
+    rd->Result = rd->InCallback->Read(rd->InCallback, &rd->Buffer, &size);
+    rd->BufferLim = rd->Buffer + size;
+    if (size == 0)
+    #endif
+    {
+      rd->ExtraBytes = 1;
+      return 0xFF;
+    }
+  }
+  return (*rd->Buffer++);
+}
+
+/* #define ReadByte (*rd->Buffer++) */
+#define ReadByte (RangeDecoderReadByte(rd))
+
+void RangeDecoderInit(CRangeDecoder *rd
+  #ifndef _LZMA_IN_CB
+    , const Byte *stream, SizeT bufferSize
+  #endif
+    )
+{
+  int i;
+  #ifdef _LZMA_IN_CB
+  rd->Buffer = rd->BufferLim = 0;
+  #else
+  rd->Buffer = stream;
+  rd->BufferLim = stream + bufferSize;
+  #endif
+  rd->ExtraBytes = 0;
+  rd->Code = 0;
+  rd->Range = (0xFFFFFFFF);
+  for(i = 0; i < 5; i++)
+    rd->Code = (rd->Code << 8) | ReadByte;
+}
+
+#define RC_INIT_VAR UInt32 range = rd->Range; UInt32 code = rd->Code;        
+#define RC_FLUSH_VAR rd->Range = range; rd->Code = code;
+#define RC_NORMALIZE if (range < kTopValue) { range <<= 8; code = (code << 8) | ReadByte; }
+
+UInt32 RangeDecoderDecodeDirectBits(CRangeDecoder *rd, int numTotalBits)
+{
+  RC_INIT_VAR
+  UInt32 result = 0;
+  int i;
+  for (i = numTotalBits; i != 0; i--)
+  {
+    /* UInt32 t; */
+    range >>= 1;
+
+    result <<= 1;
+    if (code >= range)
+    {
+      code -= range;
+      result |= 1;
+    }
+    /*
+    t = (code - range) >> 31;
+    t &= 1;
+    code -= range & (t - 1);
+    result = (result + result) | (1 - t);
+    */
+    RC_NORMALIZE
+  }
+  RC_FLUSH_VAR
+  return result;
+}
+
+int RangeDecoderBitDecode(CProb *prob, CRangeDecoder *rd)
+{
+  UInt32 bound = (rd->Range >> kNumBitModelTotalBits) * *prob;
+  if (rd->Code < bound)
+  {
+    rd->Range = bound;
+    *prob += (kBitModelTotal - *prob) >> kNumMoveBits;
+    if (rd->Range < kTopValue)
+    {
+      rd->Code = (rd->Code << 8) | ReadByte;
+      rd->Range <<= 8;
+    }
+    return 0;
+  }
+  else
+  {
+    rd->Range -= bound;
+    rd->Code -= bound;
+    *prob -= (*prob) >> kNumMoveBits;
+    if (rd->Range < kTopValue)
+    {
+      rd->Code = (rd->Code << 8) | ReadByte;
+      rd->Range <<= 8;
+    }
+    return 1;
+  }
+}
+
+#define RC_GET_BIT2(prob, mi, A0, A1) \
+  UInt32 bound = (range >> kNumBitModelTotalBits) * *prob; \
+  if (code < bound) \
+    { A0; range = bound; *prob += (kBitModelTotal - *prob) >> kNumMoveBits; mi <<= 1; } \
+  else \
+    { A1; range -= bound; code -= bound; *prob -= (*prob) >> kNumMoveBits; mi = (mi + mi) + 1; } \
+  RC_NORMALIZE
+
+#define RC_GET_BIT(prob, mi) RC_GET_BIT2(prob, mi, ; , ;)               
+
+int RangeDecoderBitTreeDecode(CProb *probs, int numLevels, CRangeDecoder *rd)
+{
+  int mi = 1;
+  int i;
+  #ifdef _LZMA_LOC_OPT
+  RC_INIT_VAR
+  #endif
+  for(i = numLevels; i != 0; i--)
+  {
+    #ifdef _LZMA_LOC_OPT
+    CProb *prob = probs + mi;
+    RC_GET_BIT(prob, mi)
+    #else
+    mi = (mi + mi) + RangeDecoderBitDecode(probs + mi, rd);
+    #endif
+  }
+  #ifdef _LZMA_LOC_OPT
+  RC_FLUSH_VAR
+  #endif
+  return mi - (1 << numLevels);
+}
+
+int RangeDecoderReverseBitTreeDecode(CProb *probs, int numLevels, CRangeDecoder *rd)
+{
+  int mi = 1;
+  int i;
+  int symbol = 0;
+  #ifdef _LZMA_LOC_OPT
+  RC_INIT_VAR
+  #endif
+  for(i = 0; i < numLevels; i++)
+  {
+    #ifdef _LZMA_LOC_OPT
+    CProb *prob = probs + mi;
+    RC_GET_BIT2(prob, mi, ; , symbol |= (1 << i))
+    #else
+    int bit = RangeDecoderBitDecode(probs + mi, rd);
+    mi = mi + mi + bit;
+    symbol |= (bit << i);
+    #endif
+  }
+  #ifdef _LZMA_LOC_OPT
+  RC_FLUSH_VAR
+  #endif
+  return symbol;
+}
+
+Byte LzmaLiteralDecode(CProb *probs, CRangeDecoder *rd)
+{ 
+  int symbol = 1;
+  #ifdef _LZMA_LOC_OPT
+  RC_INIT_VAR
+  #endif
+  do
+  {
+    #ifdef _LZMA_LOC_OPT
+    CProb *prob = probs + symbol;
+    RC_GET_BIT(prob, symbol)
+    #else
+    symbol = (symbol + symbol) | RangeDecoderBitDecode(probs + symbol, rd);
+    #endif
+  }
+  while (symbol < 0x100);
+  #ifdef _LZMA_LOC_OPT
+  RC_FLUSH_VAR
+  #endif
+  return symbol;
+}
+
+Byte LzmaLiteralDecodeMatch(CProb *probs, CRangeDecoder *rd, Byte matchByte)
+{ 
+  int symbol = 1;
+  #ifdef _LZMA_LOC_OPT
+  RC_INIT_VAR
+  #endif
+  do
+  {
+    int bit;
+    int matchBit = (matchByte >> 7) & 1;
+    matchByte <<= 1;
+    #ifdef _LZMA_LOC_OPT
+    {
+      CProb *prob = probs + 0x100 + (matchBit << 8) + symbol;
+      RC_GET_BIT2(prob, symbol, bit = 0, bit = 1)
+    }
+    #else
+    bit = RangeDecoderBitDecode(probs + 0x100 + (matchBit << 8) + symbol, rd);
+    symbol = (symbol << 1) | bit;
+    #endif
+    if (matchBit != bit)
+    {
+      while (symbol < 0x100)
+      {
+        #ifdef _LZMA_LOC_OPT
+        CProb *prob = probs + symbol;
+        RC_GET_BIT(prob, symbol)
+        #else
+        symbol = (symbol + symbol) | RangeDecoderBitDecode(probs + symbol, rd);
+        #endif
+      }
+      break;
+    }
+  }
+  while (symbol < 0x100);
+  #ifdef _LZMA_LOC_OPT
+  RC_FLUSH_VAR
+  #endif
+  return symbol;
+}
+
+#define kNumPosBitsMax 4
+#define kNumPosStatesMax (1 << kNumPosBitsMax)
+
+#define kLenNumLowBits 3
+#define kLenNumLowSymbols (1 << kLenNumLowBits)
+#define kLenNumMidBits 3
+#define kLenNumMidSymbols (1 << kLenNumMidBits)
+#define kLenNumHighBits 8
+#define kLenNumHighSymbols (1 << kLenNumHighBits)
+
+#define LenChoice 0
+#define LenChoice2 (LenChoice + 1)
+#define LenLow (LenChoice2 + 1)
+#define LenMid (LenLow + (kNumPosStatesMax << kLenNumLowBits))
+#define LenHigh (LenMid + (kNumPosStatesMax << kLenNumMidBits))
+#define kNumLenProbs (LenHigh + kLenNumHighSymbols) 
+
+int LzmaLenDecode(CProb *p, CRangeDecoder *rd, int posState)
+{
+  if(RangeDecoderBitDecode(p + LenChoice, rd) == 0)
+    return RangeDecoderBitTreeDecode(p + LenLow +
+        (posState << kLenNumLowBits), kLenNumLowBits, rd);
+  if(RangeDecoderBitDecode(p + LenChoice2, rd) == 0)
+    return kLenNumLowSymbols + RangeDecoderBitTreeDecode(p + LenMid +
+        (posState << kLenNumMidBits), kLenNumMidBits, rd);
+  return kLenNumLowSymbols + kLenNumMidSymbols + 
+      RangeDecoderBitTreeDecode(p + LenHigh, kLenNumHighBits, rd);
+}
+
+#define kNumStates 12
+#define kNumLitStates 7
+
+#define kStartPosModelIndex 4
+#define kEndPosModelIndex 14
+#define kNumFullDistances (1 << (kEndPosModelIndex >> 1))
+
+#define kNumPosSlotBits 6
+#define kNumLenToPosStates 4
+
+#define kNumAlignBits 4
+#define kAlignTableSize (1 << kNumAlignBits)
+
+#define kMatchMinLen 2
+
+#define IsMatch 0
+#define IsRep (IsMatch + (kNumStates << kNumPosBitsMax))
+#define IsRepG0 (IsRep + kNumStates)
+#define IsRepG1 (IsRepG0 + kNumStates)
+#define IsRepG2 (IsRepG1 + kNumStates)
+#define IsRep0Long (IsRepG2 + kNumStates)
+#define PosSlot (IsRep0Long + (kNumStates << kNumPosBitsMax))
+#define SpecPos (PosSlot + (kNumLenToPosStates << kNumPosSlotBits))
+#define Align (SpecPos + kNumFullDistances - kEndPosModelIndex)
+#define LenCoder (Align + kAlignTableSize)
+#define RepLenCoder (LenCoder + kNumLenProbs)
+#define Literal (RepLenCoder + kNumLenProbs)
+
+#if Literal != LZMA_BASE_SIZE
+StopCompilingDueBUG
+#endif
+
+int LzmaDecodeProperties(CLzmaProperties *propsRes, const unsigned char *propsData, int size)
+{
+  unsigned char prop0;
+  if (size < LZMA_PROPERTIES_SIZE)
+    return LZMA_RESULT_DATA_ERROR;
+  prop0 = propsData[0];
+  if (prop0 >= (9 * 5 * 5))
+    return LZMA_RESULT_DATA_ERROR;
+  {
+    for (propsRes->pb = 0; prop0 >= (9 * 5); propsRes->pb++, prop0 -= (9 * 5));
+    for (propsRes->lp = 0; prop0 >= 9; propsRes->lp++, prop0 -= 9);
+    propsRes->lc = prop0;
+    /*
+    unsigned char remainder = (unsigned char)(prop0 / 9);
+    propsRes->lc = prop0 % 9;
+    propsRes->pb = remainder / 5;
+    propsRes->lp = remainder % 5;
+    */
+  }
+
+  #ifdef _LZMA_OUT_READ
+  {
+    int i;
+    propsRes->DictionarySize = 0;
+    for (i = 0; i < 4; i++)
+      propsRes->DictionarySize += (UInt32)(propsData[1 + i]) << (i * 8);
+    if (propsRes->DictionarySize == 0)
+      propsRes->DictionarySize = 1;
+  }
+  #endif
+  return LZMA_RESULT_OK;
+}
+
+#define kLzmaStreamWasFinishedId (-1)
+
+int LzmaDecode(CLzmaDecoderState *vs,
+    #ifdef _LZMA_IN_CB
+    ILzmaInCallback *InCallback,
+    #else
+    const unsigned char *inStream, SizeT inSize, SizeT *inSizeProcessed,
+    #endif
+    unsigned char *outStream, SizeT outSize, SizeT *outSizeProcessed)
+{
+  CProb *p = vs->Probs;
+  SizeT nowPos = 0;
+  Byte previousByte = 0;
+  UInt32 posStateMask = (1 << (vs->Properties.pb)) - 1;
+  UInt32 literalPosMask = (1 << (vs->Properties.lp)) - 1;
+  int lc = vs->Properties.lc;
+  CRangeDecoder rd;
+
+  #ifdef _LZMA_OUT_READ
+  
+  int state = vs->State;
+  UInt32 rep0 = vs->Reps[0], rep1 = vs->Reps[1], rep2 = vs->Reps[2], rep3 = vs->Reps[3];
+  int len = vs->RemainLen;
+  UInt32 globalPos = vs->GlobalPos;
+  UInt32 distanceLimit = vs->DistanceLimit;
+
+  Byte *dictionary = vs->Dictionary;
+  UInt32 dictionarySize = vs->Properties.DictionarySize;
+  UInt32 dictionaryPos = vs->DictionaryPos;
+
+  Byte tempDictionary[4];
+
+  rd.Range = vs->Range;
+  rd.Code = vs->Code;
+  #ifdef _LZMA_IN_CB
+  rd.InCallback = InCallback;
+  rd.Buffer = vs->Buffer;
+  rd.BufferLim = vs->BufferLim;
+  #else
+  rd.Buffer = inStream;
+  rd.BufferLim = inStream + inSize;
+  #endif
+
+  #ifndef _LZMA_IN_CB
+  *inSizeProcessed = 0;
+  #endif
+  *outSizeProcessed = 0;
+  if (len == kLzmaStreamWasFinishedId)
+    return LZMA_RESULT_OK;
+
+  if (dictionarySize == 0)
+  {
+    dictionary = tempDictionary;
+    dictionarySize = 1;
+    tempDictionary[0] = vs->TempDictionary[0];
+  }
+
+  if (len == kLzmaNeedInitId)
+  {
+    {
+      UInt32 numProbs = Literal + ((UInt32)LZMA_LIT_SIZE << (lc + vs->Properties.lp));
+      UInt32 i;
+      for (i = 0; i < numProbs; i++)
+        p[i] = kBitModelTotal >> 1; 
+      rep0 = rep1 = rep2 = rep3 = 1;
+      state = 0;
+      globalPos = 0;
+      distanceLimit = 0;
+      dictionaryPos = 0;
+      dictionary[dictionarySize - 1] = 0;
+      RangeDecoderInit(&rd
+          #ifndef _LZMA_IN_CB
+          , inStream, inSize
+          #endif
+          );
+      #ifdef _LZMA_IN_CB
+      if (rd.Result != LZMA_RESULT_OK)
+        return rd.Result;
+      #endif
+      if (rd.ExtraBytes != 0)
+        return LZMA_RESULT_DATA_ERROR;
+    }
+    len = 0;
+  }
+  while(len != 0 && nowPos < outSize)
+  {
+    UInt32 pos = dictionaryPos - rep0;
+    if (pos >= dictionarySize)
+      pos += dictionarySize;
+    outStream[nowPos++] = dictionary[dictionaryPos] = dictionary[pos];
+    if (++dictionaryPos == dictionarySize)
+      dictionaryPos = 0;
+    len--;
+  }
+  if (dictionaryPos == 0)
+    previousByte = dictionary[dictionarySize - 1];
+  else
+    previousByte = dictionary[dictionaryPos - 1];
+
+  #ifdef _LZMA_IN_CB
+  rd.Result = LZMA_RESULT_OK;
+  #endif
+  rd.ExtraBytes = 0;
+
+  #else /* if !_LZMA_OUT_READ */
+
+  int state = 0;
+  UInt32 rep0 = 1, rep1 = 1, rep2 = 1, rep3 = 1;
+  int len = 0;
+
+  #ifndef _LZMA_IN_CB
+  *inSizeProcessed = 0;
+  #endif
+  *outSizeProcessed = 0;
+
+  {
+    UInt32 i;
+    UInt32 numProbs = Literal + ((UInt32)LZMA_LIT_SIZE << (lc + vs->Properties.lp));
+    for (i = 0; i < numProbs; i++)
+      p[i] = kBitModelTotal >> 1;
+  }
+  
+  #ifdef _LZMA_IN_CB
+  rd.InCallback = InCallback;
+  #endif
+  RangeDecoderInit(&rd
+      #ifndef _LZMA_IN_CB
+      , inStream, inSize
+      #endif
+      );
+
+  #ifdef _LZMA_IN_CB
+  if (rd.Result != LZMA_RESULT_OK)
+    return rd.Result;
+  #endif
+  if (rd.ExtraBytes != 0)
+    return LZMA_RESULT_DATA_ERROR;
+
+  #endif /* _LZMA_OUT_READ */
+
+
+  while(nowPos < outSize)
+  {
+    int posState = (int)(
+        (nowPos 
+        #ifdef _LZMA_OUT_READ
+        + globalPos
+        #endif
+        )
+        & posStateMask);
+    #ifdef _LZMA_IN_CB
+    if (rd.Result != LZMA_RESULT_OK)
+      return rd.Result;
+    #endif
+    if (rd.ExtraBytes != 0)
+      return LZMA_RESULT_DATA_ERROR;
+    if (RangeDecoderBitDecode(p + IsMatch + (state << kNumPosBitsMax) + posState, &rd) == 0)
+    {
+      CProb *probs = p + Literal + (LZMA_LIT_SIZE * 
+        (((
+        (nowPos 
+        #ifdef _LZMA_OUT_READ
+        + globalPos
+        #endif
+        )
+        & literalPosMask) << lc) + (previousByte >> (8 - lc))));
+
+      if (state >= kNumLitStates)
+      {
+        Byte matchByte;
+        #ifdef _LZMA_OUT_READ
+        UInt32 pos = dictionaryPos - rep0;
+        if (pos >= dictionarySize)
+          pos += dictionarySize;
+        matchByte = dictionary[pos];
+        #else
+        matchByte = outStream[nowPos - rep0];
+        #endif
+        previousByte = LzmaLiteralDecodeMatch(probs, &rd, matchByte);
+      }
+      else
+        previousByte = LzmaLiteralDecode(probs, &rd);
+      outStream[nowPos++] = previousByte;
+      #ifdef _LZMA_OUT_READ
+      if (distanceLimit < dictionarySize)
+        distanceLimit++;
+
+      dictionary[dictionaryPos] = previousByte;
+      if (++dictionaryPos == dictionarySize)
+        dictionaryPos = 0;
+      #endif
+      if (state < 4) state = 0;
+      else if (state < 10) state -= 3;
+      else state -= 6;
+    }
+    else             
+    {
+      if (RangeDecoderBitDecode(p + IsRep + state, &rd) == 1)
+      {
+        if (RangeDecoderBitDecode(p + IsRepG0 + state, &rd) == 0)
+        {
+          if (RangeDecoderBitDecode(p + IsRep0Long + (state << kNumPosBitsMax) + posState, &rd) == 0)
+          {
+            #ifdef _LZMA_OUT_READ
+            UInt32 pos;
+            #endif
+      
+            #ifdef _LZMA_OUT_READ
+            if (distanceLimit == 0)
+            #else
+            if (nowPos == 0)
+            #endif
+              return LZMA_RESULT_DATA_ERROR;
+
+            state = state < 7 ? 9 : 11;
+            #ifdef _LZMA_OUT_READ
+            pos = dictionaryPos - rep0;
+            if (pos >= dictionarySize)
+              pos += dictionarySize;
+            previousByte = dictionary[pos];
+            dictionary[dictionaryPos] = previousByte;
+            if (++dictionaryPos == dictionarySize)
+              dictionaryPos = 0;
+            #else
+            previousByte = outStream[nowPos - rep0];
+            #endif
+            outStream[nowPos++] = previousByte;
+
+            #ifdef _LZMA_OUT_READ
+            if (distanceLimit < dictionarySize)
+              distanceLimit++;
+            #endif
+            continue;
+          }
+        }
+        else
+        {
+          UInt32 distance;
+          if(RangeDecoderBitDecode(p + IsRepG1 + state, &rd) == 0)
+            distance = rep1;
+          else 
+          {
+            if(RangeDecoderBitDecode(p + IsRepG2 + state, &rd) == 0)
+              distance = rep2;
+            else
+            {
+              distance = rep3;
+              rep3 = rep2;
+            }
+            rep2 = rep1;
+          }
+          rep1 = rep0;
+          rep0 = distance;
+        }
+        len = LzmaLenDecode(p + RepLenCoder, &rd, posState);
+        state = state < 7 ? 8 : 11;
+      }
+      else
+      {
+        int posSlot;
+        rep3 = rep2;
+        rep2 = rep1;
+        rep1 = rep0;
+        state = state < 7 ? 7 : 10;
+        len = LzmaLenDecode(p + LenCoder, &rd, posState);
+        posSlot = RangeDecoderBitTreeDecode(p + PosSlot +
+            ((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << 
+            kNumPosSlotBits), kNumPosSlotBits, &rd);
+        if (posSlot >= kStartPosModelIndex)
+        {
+          int numDirectBits = ((posSlot >> 1) - 1);
+          rep0 = ((2 | ((UInt32)posSlot & 1)) << numDirectBits);
+          if (posSlot < kEndPosModelIndex)
+          {
+            rep0 += RangeDecoderReverseBitTreeDecode(
+                p + SpecPos + rep0 - posSlot - 1, numDirectBits, &rd);
+          }
+          else
+          {
+            rep0 += RangeDecoderDecodeDirectBits(&rd, 
+                numDirectBits - kNumAlignBits) << kNumAlignBits;
+            rep0 += RangeDecoderReverseBitTreeDecode(p + Align, kNumAlignBits, &rd);
+          }
+        }
+        else
+          rep0 = posSlot;
+        if (++rep0 == (UInt32)(0))
+        {
+          /* it's for stream version */
+          len = kLzmaStreamWasFinishedId;
+          break;
+        }
+      }
+
+      len += kMatchMinLen;
+      #ifdef _LZMA_OUT_READ
+      if (rep0 > distanceLimit) 
+      #else
+      if (rep0 > nowPos)
+      #endif
+        return LZMA_RESULT_DATA_ERROR;
+
+      #ifdef _LZMA_OUT_READ
+      if (dictionarySize - distanceLimit > (UInt32)len)
+        distanceLimit += len;
+      else
+        distanceLimit = dictionarySize;
+      #endif
+
+      do
+      {
+        #ifdef _LZMA_OUT_READ
+        UInt32 pos = dictionaryPos - rep0;
+        if (pos >= dictionarySize)
+          pos += dictionarySize;
+        previousByte = dictionary[pos];
+        dictionary[dictionaryPos] = previousByte;
+        if (++dictionaryPos == dictionarySize)
+          dictionaryPos = 0;
+        #else
+        previousByte = outStream[nowPos - rep0];
+        #endif
+        len--;
+        outStream[nowPos++] = previousByte;
+      }
+      while(len != 0 && nowPos < outSize);
+    }
+  }
+
+
+  #ifdef _LZMA_OUT_READ
+  vs->Range = rd.Range;
+  vs->Code = rd.Code;
+  vs->DictionaryPos = dictionaryPos;
+  vs->GlobalPos = globalPos + (UInt32)nowPos;
+  vs->DistanceLimit = distanceLimit;
+  vs->Reps[0] = rep0;
+  vs->Reps[1] = rep1;
+  vs->Reps[2] = rep2;
+  vs->Reps[3] = rep3;
+  vs->State = state;
+  vs->RemainLen = len;
+  vs->TempDictionary[0] = tempDictionary[0];
+  #endif
+
+  #ifdef _LZMA_IN_CB
+  vs->Buffer = rd.Buffer;
+  vs->BufferLim = rd.BufferLim;
+  #else
+  *inSizeProcessed = (SizeT)(rd.Buffer - inStream);
+  #endif
+  *outSizeProcessed = nowPos;
+  return LZMA_RESULT_OK;
+}
